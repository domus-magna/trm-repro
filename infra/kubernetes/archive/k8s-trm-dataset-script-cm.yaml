apiVersion: v1
kind: ConfigMap
metadata:
  name: trm-dataset-script
  labels:
    app: trm-dataset-builder
data:
  run.sh: |
    #!/usr/bin/env bash
    set -euo pipefail
    apt-get update -y >/dev/null && apt-get install -y --no-install-recommends git ca-certificates >/dev/null && rm -rf /var/lib/apt/lists/*
    python3 -V
    pip install --upgrade pip wheel setuptools >/dev/null
    pip install numpy pydantic argdantic >/dev/null
    # Clone TRM into workspace if missing
    if [ ! -d /workspace/TinyRecursiveModels/.git ]; then
      git clone https://github.com/SamsungSAILMontreal/TinyRecursiveModels.git /workspace/TinyRecursiveModels
    fi
    cd /workspace/TinyRecursiveModels
    mkdir -p kaggle/combined/arc-agi/{training2,evaluation2,concept}
    # Fetch ARC-AGI-2 and ConceptARC
    tmp_arc2=$(mktemp -d); git clone --depth=1 https://github.com/arcprize/ARC-AGI-2.git "$tmp_arc2"
    cp -v "$tmp_arc2/data/training"/*.json kaggle/combined/arc-agi/training2/ || true
    cp -v "$tmp_arc2/data/evaluation"/*.json kaggle/combined/arc-agi/evaluation2/ || true
    rm -rf "$tmp_arc2"
    tmp_concept=$(mktemp -d); git clone --depth=1 https://github.com/victorvikram/ConceptARC.git "$tmp_concept"
    find "$tmp_concept/corpus" -type f -name '*.json' -print0 | xargs -0 -I{} cp -v {} kaggle/combined/arc-agi/concept/ || true
    rm -rf "$tmp_concept"
    # Aggregate
    python - <<'PY'
    import json
    from pathlib import Path
    root = Path('/workspace/TinyRecursiveModels')
    base = root / 'kaggle/combined/arc-agi'

    def aggregate(src: Path):
        out = {}
        for p in src.rglob('*.json'):
            out[p.stem] = json.loads(p.read_text())
        print(src, '->', len(out), 'puzzles')
        return out

    for subset in ['training2','evaluation2','concept']:
        data = aggregate(base / subset)
        (root / f'kaggle/combined/arc-agi_{subset}_challenges.json').write_text(json.dumps(data))
    PY
    # Fetch official ARC-AGI-2 evaluation solutions from Kaggle and alias filenames
    pip install kaggle >/dev/null || true
    mkdir -p /root/.kaggle
    # Prefer a PVC-mounted token at /workspace, fallback to any existing root token
    if [ -f /workspace/.kaggle/kaggle.json ]; then
      cp -f /workspace/.kaggle/kaggle.json /root/.kaggle/kaggle.json
    elif [ -f "/workspace/kaggle (1).json" ]; then
      # Some environments drop the token with a space in the filename
      cp -f "/workspace/kaggle (1).json" /root/.kaggle/kaggle.json
    fi
    if [ ! -f /root/.kaggle/kaggle.json ]; then
      echo "Missing Kaggle token at /root/.kaggle/kaggle.json or /workspace/.kaggle/kaggle.json" >&2
      exit 2
    fi
    chmod 600 /root/.kaggle/kaggle.json || true
    # Inspect available files for the exact solutions filename
    kaggle competitions files -c arc-prize-2025 | grep -i solution || true
    # Try multiple known spellings
    kaggle competitions download -c arc-prize-2025 -f arc-agi_evaluation_solutions.json || true
    kaggle competitions download -c arc-prize-2025 -f arc-agi_evaluation-solutions.json || true
    kaggle competitions download -c arc-prize-2025 -f arc-agi_evaluation2-solutions.json || true
    # Unzip whichever we got
    if   [ -f arc-agi_evaluation_solutions.json.zip ]; then Z=arc-agi_evaluation_solutions.json.zip
    elif [ -f arc-agi_evaluation-solutions.json.zip ]; then Z=arc-agi_evaluation-solutions.json.zip
    elif [ -f arc-agi_evaluation2-solutions.json.zip ]; then Z=arc-agi_evaluation2-solutions.json.zip
    else Z=""; fi
    if [ -n "$Z" ]; then
      if command -v unzip >/dev/null 2>&1; then unzip -o "$Z"; else python - "$Z" <<'PY'
    import zipfile, sys
    zipfile.ZipFile(sys.argv[1]).extractall()
    print('Extracted', sys.argv[1])
    PY
    fi; fi
    # Resolve the extracted JSON name
    if   [ -f arc-agi_evaluation_solutions.json ]; then SOL=arc-agi_evaluation_solutions.json
    elif [ -f arc-agi_evaluation-solutions.json ]; then SOL=arc-agi_evaluation-solutions.json
    elif [ -f arc-agi_evaluation2-solutions.json ]; then SOL=arc-agi_evaluation2-solutions.json
    else echo "Could not find a downloaded evaluation solutions file" >&2; exit 3; fi
    # Place/alias the solutions file to multiple names TRM/evaluators may look for
    cp -f "$SOL" kaggle/combined/arc-agi_evaluation2-solutions.json
    cp -f "$SOL" kaggle/combined/arc-agi_evaluation2_solutions.json
    cp -f "$SOL" kaggle/combined/arc-agi_evaluation-solutions.json
    cp -f "$SOL" kaggle/combined/arc-agi_evaluation_solutions.json
    ls -la kaggle/combined | grep -i evaluation || true
    # Sanitize evaluation2 solutions (dedupe and truncate to match test counts)
    echo "Sanitizing evaluation2 solutions..."
    python - <<'PYSANITIZE'
    import json
    challenges = json.load(open("kaggle/combined/arc-agi_evaluation2_challenges.json"))
    solutions = json.load(open("kaggle/combined/arc-agi_evaluation2_solutions.json"))
    affected, fixed, deduped_count = [], 0, 0
    for puzzle_id in challenges.keys():
        if puzzle_id not in solutions: continue
        challenge_tests, solution_list = challenges[puzzle_id]["test"], solutions[puzzle_id]
        # Deduplicate
        seen, dedup_list = set(), []
        for sol in solution_list:
            key = json.dumps(sol, sort_keys=True)
            if key in seen: deduped_count += 1; continue
            seen.add(key); dedup_list.append(sol)
        solution_list = dedup_list
        n_challenge, n_solution = len(challenge_tests), len(solution_list)
        if n_solution > n_challenge:
            solution_list = solution_list[:n_challenge]
            affected.append((puzzle_id, n_challenge, n_solution)); fixed += 1
        solutions[puzzle_id] = solution_list
    json.dump(solutions, open("kaggle/combined/arc-agi_evaluation2_solutions.json", "w"), ensure_ascii=False, indent=2)
    for fn in ["arc-agi_evaluation2-solutions.json", "arc-agi_evaluation-solutions.json", "arc-agi_evaluation_solutions.json"]:
        json.dump(solutions, open(f"kaggle/combined/{fn}", "w"), ensure_ascii=False, indent=2)
    print(f"Sanitized: deduped={deduped_count}, truncated={fixed} puzzles")
    for pid, nc, ns in affected: print(f"  {pid}: kept {nc} of {ns} solutions")
    PYSANITIZE
    # Build dataset
    python -m dataset.build_arc_dataset \
      --input-file-prefix kaggle/combined/arc-agi \
      --output-dir data/arc2concept-aug-1000 \
      --subsets training2 evaluation2 concept \
      --test-set-name evaluation2
